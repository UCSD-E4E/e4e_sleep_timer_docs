@startuml System Diagram
[Battery] as batt
package "Sleep Timer" {
    [Nucleo G071RB] as stm32
    [MOSFET] as mosfet
    [RTC] as rtc
    interface "External Wakeup" as exti
    exti -> stm32 : External Interrupt
    rtc <-> stm32 : Time/Alarm Interrupt
    stm32 -> mosfet : Control Signal
}
[5V DC Regulator] as 5vreg
[System] as system
batt --> 5vreg : Battery Voltage
5vreg --> stm32 : 5V DC
5vreg -> mosfet : 5V DC
mosfet --> system : VDD1
system <-> stm32 : Serial Control
@enduml

@startuml FW Diagram
class SerialDriver{
    int E4E_HAL_Serial_init(E4E_HAL_SerialDesc_t*, E4E_HAL_SerialDevice_e, E4E_HAL_SerialConfig_t*)
    int E4E_HAL_Serial_read(E4E_HAL_SerialDesc_t*, void*, size_t count, uint32_t timeout)
    int E4E_HAL_Serial_write(E4E_HAL_SerialDesc_t*, const void*, size_t count, uint32_t timeout)
    int E4E_HAL_Serial_flush(E4E_HAL_SerialDesc_t*)
    int E4E_HAL_Serial_deinit(E4E_HAL_SerialDesc_t*)
}

class RTCDriver{ 
    int E4E_HAL_RTC_init(E4E_HAL_RTCDesc_t*, E4E_HAL_RTCConfig_t*)
    int E4E_HAL_RTC_deinit(E4E_HAL_RTCDesc_t*)
    int E4E_HAL_RTC_getTime(E4E_HAL_RTCDesc_t*, int64_t*)
    int E4E_HAL_RTC_setTime(E4E_HAL_RTCDesc_t*, int64_t)
    int E4E_HAL_RTC_setAlarm(E4E_HAL_RTCDesc_t*, int64_t)
    int E4E_HAL_RTC_clearAlarm(E4E_HAL_RTCDesc_t*)
    int rE4E_HAL_RTC_egisterAlarmCallback(E4E_HAL_RTCDesc_t*, int (*)(int64_t, void*))
}
class PwrCtrlDriver{
    int E4E_HAL_PwrCtrl_init(E4E_HAL_PWRCTRLDesc_t*, E4E_HAL_PWRCTRLDevice_e, E4E_HAL_PWRCTRLConfig_t*)
    int E4E_HAL_PwrCtrl_deinit(E4E_HAL_PWRCTRLDesc_t*)
    int E4E_HAL_PwrCtrl_setState(E4E_HAL_PWRCTRLDesc_t*)
}

class CommandModule{
    int E4E_ST_Command_init(E4E_ST_CommandDesc_t*, E4E_ST_CommandConfig_t*)
    int E4E_ST_Command_deinit(E4E_ST_CommandDesc_t*)
    int E4E_ST_Command_parse(E4E_ST_CommandDesc_t*, uint8_t)
    int E4E_ST_Command_registerCommandCallback(E4E_ST_CommandDesc_t*, E4E_ST_CommandID_e, int (*)(E4E_ST_CommandID_e, void*))
}
class Application{
    E4E_ST_CommandDesc_t commandModule
    int E4E_ST_App_init(E4E_ST_AppDesc_t*, E4E_ST_AppConfig_t*)
    int E4E_ST_App_doWakeCommand(E4E_ST_CommandID_e, void*)
    int E4E_ST_App_doSetTimeCommand(E4E_ST_CommandID_e, void*)
    int E4E_ST_App_doAlarm(int64_t, void*)
}

class HAL_System{
    E4E_HAL_SerialDesc_t commandSerialDesc
    E4E_HAL_SerialDesc_t debugSerialDesc
    E4E_HAL_RTCDesc_t rtcDesc
    E4E_HAL_PWRCTRLDesc_t system1Desc
}

HAL_System *-- SerialDriver
HAL_System *-- RTCDriver
HAL_System *-- PwrCtrlDriver

Application *-- CommandModule
@enduml

@startuml Firmware Architecture
package "Sleep Timer Application"{
    [Application] as app
    [Command Module] as cmd
}
package "E4E HAL" {
    [E4E HAL Serial] as e4e_hal_serial
    [E4E HAL RTC] as e4e_hal_rtc
    [E4E HAL Power Control] as e4e_hal_pwrctrl
}
package "STM32 HAL" {
    [STM32 HAL UART] as hal_uart
    [STM32 HAL RTC] as hal_rtc
    [STM32 HAL GPIO] as hal_gpio
}

e4e_hal_serial --> hal_uart
e4e_hal_rtc --> hal_rtc
e4e_hal_pwrctrl --> hal_gpio

cmd --> e4e_hal_serial
app <--> cmd
app <--> e4e_hal_pwrctrl
app <--> e4e_hal_rtc
app --> e4e_hal_serial

@enduml